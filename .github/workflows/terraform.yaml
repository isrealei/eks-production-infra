name: IaC Deploy 
on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'infra-live2/**'
      - '.github/workflows/terraform.yaml'
  pull_request:
    branches:
      - main
    paths:
      - 'infra-live2/**'
  
env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ROLE_NAME: ${{ secrets.AWS_ROLE_NAME }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE}}
  DYNAMO_DB_LOCK: ${{ secrets.DYNAMO_DB_LOCK }}
  TF_destroy: true


permissions:
  id-token: write
  contents: read

jobs:
  deploy-infrastructure:
    name: Deploy VPC and Infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra-live2/
   
    steps:

      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Terraform security scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          working_directory: ./infra-live2/
  
      - name: Configure AWS credentials using OIDC to connect to AWS
        # This step assumes you have set up an IAM role for GitHub Actions to assume
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          role-session-name: GitHubActionsSession
          aws-region: us-east-1

      - name:  HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v3.1.2
        
    
      - name: Terraform Init
        run: |
          terraform init \
            --backend-config="bucket=${BUCKET_TF_STATE}" \
            --backend-config="key=dev/terraform.tfstate" \
            --backend-config="region=us-east-1" \
            --backend-config="use_lockfile=true" \
        id: init
        
      - name: Terraform format
        run: terraform fmt -check
        id: fmt

      - name: Terraform Validate
        run: terraform validate
        id: validate
      
      - name: Get dev.tfvars from aws secrete manager
        run: |
          aws secretsmanager get-secret-value --secret-id dev.tfvars --query SecretString --output text > vars/dev/dev-env.tfvars
        id: get_tfvars

      # - name: Terraform Plan
      #   run: terraform plan -no-color -input=false -lock=false  -out planfile --var-file=vars/dev/dev-env.tfvars 
      #   id: plan

      - name: Terraform Apply
        if: ${{github.ref == 'refs/heads/main' && github.event_name == 'push' &&  env.TF_destroy == 'false'}}
        run: terraform apply -lock=true -auto-approve planfile
        id: apply

      # - name: update kubeconfig
      #   run: aws eks update-kubeconfig --name barilon --region us-east-1
      #   id: update_kubeconfig

      - name: Deploy ingress resources to expose ArgoCD and Grafana
        run: |
            sed -e "s|{{CERT_ARN}}|${{ secrets.CERT_ARN }}|g" \
                -e "s|{{CERT_ARN_GRAFANA}}|${{ secrets.CERT_ARN_GRAFANA }}|g" \
                ingress.yaml > ingress-final.yaml
        id: deploy_ingress

      - name: Apply manifests
        if: ${{ env.TF_destroy == 'false'}}
        run: |
          kubectl apply -f ingress-final.yaml
          kubectl apply -f application.yaml
        id: apply_manifests

      # - name: delete manifests - will only run when the cluster needs to be destroyed
      #   if: ${{ env.TF_destroy == 'true' }}
      #   run: |
      #     kubectl delete -f ingress-final.yaml
      #     kubectl delete -f application.yaml
      #   id: delete_manifests

      - name: Terraform Destroy
        run: terraform destroy --var-file=vars/dev/dev-env.tfvars -lock=false -auto-approve
        if: ${{ env.TF_destroy == 'true'}}
        id: destroy
        
  



  


        